{"version":3,"sources":["../src/query_ctrl.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQ,e,kBAAA,S;;;;;;;;;;;;;;;;;;;;;4CAGK,0B;;;AAEX,4CAAY,MAAZ,EAAoB,SAApB,EAA+B,YAA/B,EAA8C;AAAA;;AAAA,oHACtC,MADsC,EAC9B,SAD8B;;AAG5C,gBAAK,KAAL,GAAa,MAAb;AACA,gBAAK,YAAL,GAAoB,YAApB;AACA,gBAAK,MAAL,CAAY,QAAZ,GAAuB,MAAK,MAAL,CAAY,QAAZ,IAAwB,iBAA/C;AACA,gBAAK,MAAL,CAAY,QAAZ,GAAuB,MAAK,MAAL,CAAY,QAAZ,IAAwB,iBAA/C;AACA,gBAAK,MAAL,CAAY,MAAZ,GAAqB,MAAK,MAAL,CAAY,MAAZ,IAAsB,eAA3C;AACA,gBAAK,MAAL,CAAY,SAAZ,GAAwB,MAAK,MAAL,CAAY,SAAZ,IAAyB,kBAAjD;AACA,gBAAK,MAAL,CAAY,QAAZ,GAAuB,MAAK,MAAL,CAAY,QAAZ,IAAwB,kBAA/C;AACA,gBAAK,MAAL,CAAY,YAAZ,GAA2B,MAAK,MAAL,CAAY,YAAZ,IAA4B,sBAAvD;AACA,gBAAK,MAAL,CAAY,OAAZ,GAAsB,MAAK,MAAL,CAAY,OAAZ,IAAuB,iBAA7C;AAX4C;AAY7C;;;;0CAEe;AACd,mBAAO,KAAK,UAAL,CAAgB,uBAAhB,CAAwC,KAAK,MAA7C,EACJ,IADI,CACC,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;yCACc;AACb,mBAAO,KAAK,UAAL,CAAgB,uBAAhB,CAAwC,KAAK,MAA7C,EACJ,IADI,CACC,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;uCACY;AACX,mBAAO,KAAK,UAAL,CAAgB,qBAAhB,CAAsC,KAAK,MAA3C,EACJ,IADI,CACC,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;0CACe;AACd,mBAAO,KAAK,UAAL,CAAgB,wBAAhB,CAAyC,KAAK,MAA9C,EACJ,IADI,CACC,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;yCACgB;AACf,mBAAO,KAAK,UAAL,CAAgB,uBAAhB,CAAwC,KAAK,MAA7C,EACJ,IADI,CACC,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;6CACkB;AACjB,mBAAO,KAAK,UAAL,CAAgB,2BAAhB,CAA4C,KAAK,MAAjD,EACJ,IADI,CACC,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;wCACe;AACd,mBAAO,KAAK,UAAL,CAAgB,sBAAhB,CAAuC,KAAK,MAA5C,EACJ,IADI,CACC,KAAK,YAAL,CAAkB,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;6CAEkB;AACjB,iBAAK,MAAL,CAAY,QAAZ,GAAuB,CAAC,KAAK,MAAL,CAAY,QAApC;AACD;;;6CAEkB;AACjB,iBAAK,SAAL,CAAe,OAAf,GADiB,CACS;AAC3B;;;;QA1D6C,S;;;;AA6DhD,iCAA2B,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.target.category = this.target.category || 'select category';\n    this.target.variable = this.target.variable || 'select variable';\n    this.target.device = this.target.device || 'select device';\n    this.target.component = this.target.component || 'select component';\n    this.target.tagFacet = this.target.tagFacet || 'select tag facet';\n    this.target.tagOperation = this.target.tagOperation || 'select tag operation';\n    this.target.tagName = this.target.tagName || 'select tag name';\n  }\n\n  getCategories() {\n    return this.datasource.metricFindCategoryQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n  getVariables() {\n    return this.datasource.metricFindVariableQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n  getDevices() {\n    return this.datasource.metricFindDeviceQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n  getComponents() {\n    return this.datasource.metricFindComponentQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n    getTagsFacet() {\n    return this.datasource.metricFindTagFacetQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n  getTagsOperation() {\n    return this.datasource.metricFindTagOperationQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n    getTagsName() {\n    return this.datasource.metricFindTagNameQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}