{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    console.log('options');\n    console.log(options);\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n      console.log('query');\n      console.log(query);\n    var endpoint = '';\n    if(typeof query.targets[0].variable !== \"undefined\" && query.targets[0].variable !== \"select variable\") {\n      endpoint = '/v2/grafana/net/2/query?';\n      endpoint += 'name='+query.targets[0].variable;\n      if(typeof query.targets[0].device !== \"undefined\" && query.targets[0].device !== \"select device\") {\n        endpoint += '&device='+query.targets[0].device;\n      }\n      if(typeof query.targets[0].component !== \"undefined\" && query.targets[0].component !== \"select component\") {\n        endpoint += '&component='+query.targets[0].component;\n      }\n      return this.backendSrv.datasourceRequest({\n        url: this.url + endpoint,\n        data: query,\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    else {\n      return '';\n    }\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  // Optional\n  // Required for templating\n  metricFindCategoryQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/v2/grafana/net/2/catalog/categories/list',\n      data: options,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n  metricFindVariableQuery(options) {\n    var endpoint = '/v2/grafana/net/2/catalog/categories/';\n    if(options.category !== 'select category'){\n      endpoint += options.category;\n    }\n    return this.backendSrv.datasourceRequest({\n      url: this.url + endpoint,\n      data: options,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n  metricFindDeviceQuery(options) {\n    var endpoint = '/v2/grafana/net/2/catalog/variables/';\n    if(options.category !== 'select category' && options.variable !== 'select variable'){\n      endpoint += options.variable;\n      endpoint += '/devices/list';\n    }\n    return this.backendSrv.datasourceRequest({\n      url: this.url + endpoint,\n      data: options,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n  metricFindComponentQuery(options) {\n    var endpoint = '/v2/grafana/net/2/catalog/variables/';\n    if(options.category !== 'select category' && options.variable !== 'select variable'){\n      endpoint += options.variable;\n      endpoint += '/components/list';\n    }\n    return this.backendSrv.datasourceRequest({\n      url: this.url + endpoint,\n      data: options,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n  metricFindTagQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/v2/grafana/net/2/catalog/categories/list',\n      data: options,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d, value: i};\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n          category: this.templateSrv.replace(target.category),\n          variable: this.templateSrv.replace(target.variable),\n          device: this.templateSrv.replace(target.device),\n          component: this.templateSrv.replace(target.component),\n          tag: this.templateSrv.replace(target.tag),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}