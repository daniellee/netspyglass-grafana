{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAO,a;;;;;;;;;;;;;;;;;;;;;yCAEM,iB;AAET,2CAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C,WAA9C,EAA2D;AAAA;;AACvD,yBAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,yBAAK,GAAL,GAAW,iBAAiB,GAA5B;AACA,yBAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,yBAAK,CAAL,GAAS,EAAT;AACA,yBAAK,UAAL,GAAkB,UAAlB;AACA,yBAAK,WAAL,GAAmB,WAAnB;AACH;;AAED;;;;;0CACM,O,EAAS;AACX,4BAAI,QAAQ,KAAK,oBAAL,CAA0B,OAA1B,CAAZ;AACA,8BAAM,OAAN,GAAgB,MAAM,OAAN,CAAc,MAAd,CAAqB;AAAA,mCAAK,CAAC,EAAE,IAAR;AAAA,yBAArB,CAAhB;;AAEA,4BAAI,MAAM,OAAN,CAAc,MAAd,IAAwB,CAA5B,EAA+B;AAC3B,mCAAO,KAAK,CAAL,CAAO,IAAP,CAAY,EAAC,MAAM,EAAP,EAAZ,CAAP;AACH;AACD,4BAAI,WAAW,EAAf;;AAEA,iCAAS,aAAT,CAAuB,MAAvB,EAA+B;AAC3B,mCAAO,OAAO,OAAO,QAAd,KAA2B,WAA3B,IAA0C,OAAO,QAAP,KAAoB,iBAA9D,IAAmF,OAAO,OAAO,QAAd,KAA2B,WAA9G,IAA6H,OAAO,QAAP,KAAoB,iBAAxJ;AACH;;AAED,4BAAI,MAAM,OAAN,CAAc,MAAd,CAAqB,aAArB,EAAoC,MAApC,GAA6C,CAAjD,EAAoD;AAAA,gCAWvC,WAXuC,GAWhD,SAAS,WAAT,CAAqB,IAArB,EAA2B,KAA3B,EAAkC;AAC9B,oCAAI,OAAO,EAAX;AACA,oCAAI,OAAO,KAAK,QAAZ,KAAyB,WAAzB,IAAwC,KAAK,QAAL,KAAkB,iBAA1D,IAA+E,KAAK,QAAL,KAAkB,uBAArG,EAA8H;AAC1H,yCAAK,QAAL,GAAgB,KAAK,QAArB;AACH;AACD,oCAAI,OAAO,KAAK,MAAZ,KAAuB,WAAvB,IAAsC,KAAK,MAAL,KAAgB,eAAtD,IAAyE,KAAK,MAAL,KAAgB,uBAA7F,EAAsH;AAClH,yCAAK,MAAL,GAAc,KAAK,MAAnB;AACH;AACD,oCAAI,OAAO,KAAK,SAAZ,KAA0B,WAA1B,IAAyC,KAAK,SAAL,KAAmB,kBAA5D,IAAkF,KAAK,SAAL,KAAmB,uBAAzG,EAAkI;AAC9H,yCAAK,SAAL,GAAiB,KAAK,SAAtB;AACH;AACD,oCAAI,OAAO,KAAK,QAAZ,KAAyB,WAAzB,IAAwC,KAAK,QAAL,KAAkB,gBAA9D,EAAgF;AAC5E,wCAAG,KAAK,QAAL,IAAiB,WAApB,EAAgC;AAC5B,6CAAK,MAAL,GAAc,UAAd;AACH;AACD,wCAAG,KAAK,QAAL,IAAiB,YAApB,EAAiC;AAC7B,6CAAK,MAAL,GAAc,WAAd;AACH;AACJ;AACD,oCAAI,OAAO,KAAK,QAAZ,KAAyB,WAAzB,IAAwC,KAAK,QAAL,KAAkB,iBAA9D,EAAiF;AAC7E,yCAAK,QAAL,GAAgB,KAAK,QAArB;AACH;AACD,oCAAI,OAAO,KAAK,KAAZ,KAAsB,WAAtB,IAAqC,KAAK,KAAL,KAAe,cAAxD,EAAwE;AACpE,yCAAK,KAAL,GAAa,KAAK,KAAlB;AACH;AACD,oCAAI,OAAO,KAAK,QAAZ,KAAyB,WAAzB,IAAwC,KAAK,QAAL,KAAkB,kBAA1D,IAAgF,KAAK,QAAL,KAAkB,uBAAlG,IAA6H,OAAO,KAAK,YAAZ,KAA6B,WAA1J,IAAyK,OAAO,KAAK,OAAZ,KAAwB,WAAjM,IAAgN,KAAK,OAAL,KAAiB,iBAAjO,IAAsP,KAAK,OAAL,KAAiB,uBAA3Q,EAAoS;AAAA,wCAIvR,QAJuR,GAIhS,SAAS,QAAT,CAAkB,UAAlB,EAA8B,KAA9B,EAAqC;AACjC,4CAAI,OAAO,WAAW,QAAlB,KAA+B,WAA/B,IAA8C,WAAW,QAAX,KAAwB,EAAtE,IAA4E,OAAO,WAAW,OAAlB,KAA8B,WAA1G,IAAyH,WAAW,OAAX,KAAuB,EAApJ,EAAwJ;AACpJ,mDAAO,IAAP,CAAY;AACR,0DAAU,WAAW,QADb;AAER,8DAAc,WAAW,YAFjB;AAGR,yDAAS,WAAW;AAHZ,6CAAZ;AAKH;AACJ,qCAZ+R;;AAEhS,wCAAI,SAAS,EAAb;AACA,yCAAK,OAAL,CAAa,OAAb,CAAqB,QAArB;;;AAWA,yCAAK,IAAL,GAAY,MAAZ;AACH;AACD,4CAAY,OAAZ,CAAoB,IAApB,CAAyB,IAAzB;AACH,6BArD+C;;AAChD,uCAAW,yBAAX;;AAEA,gCAAI,cAAc;AACd,yCAAS,EADK;AAEd,sCAAM,KAFQ;AAGd,uCAAO;AAHO,6BAAlB;;AAMA,kCAAM,OAAN,CAAc,OAAd,CAAsB,WAAtB;;AA8CA,wCAAY,IAAZ,GAAmB,MAAM,QAAN,CAAe,IAAlC;AACA,wCAAY,KAAZ,GAAoB,MAAM,QAAN,CAAe,EAAnC;AACA,gCAAI,OAAO,KAAK,SAAL,CAAe,WAAf,CAAX;AACA,oCAAQ,GAAR,CAAY,IAAZ;AACA,mCAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,qCAAK,KAAK,GAAL,GAAW,QADqB;AAErC,sCAAM,IAF+B;AAGrC,wCAAQ,MAH6B;AAIrC,yCAAS,EAAC,gBAAgB,kBAAjB;AAJ4B,6BAAlC,CAAP;AAMH,yBAjED,MAkEK;AACD,mCAAO,EAAP;AACH;AACJ;;;qDAIgB;AACb,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,GADqB;AAErC,oCAAQ;AAF6B,yBAAlC,EAGJ,IAHI,CAGC,oBAAY;AAChB,gCAAI,SAAS,MAAT,KAAoB,GAAxB,EAA6B;AACzB,uCAAO,EAAC,QAAQ,SAAT,EAAoB,SAAS,wBAA7B,EAAuD,OAAO,SAA9D,EAAP;AACH;AACJ,yBAPM,CAAP;AAQH;;;oDAEe,O,EAAS;AACrB,4BAAI,QAAQ,KAAK,WAAL,CAAiB,OAAjB,CAAyB,QAAQ,UAAR,CAAmB,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,4BAAI,kBAAkB;AAClB,mCAAO,QAAQ,KADG;AAElB,wCAAY;AACR,sCAAM,QAAQ,UAAR,CAAmB,IADjB;AAER,4CAAY,QAAQ,UAAR,CAAmB,UAFvB;AAGR,wCAAQ,QAAQ,UAAR,CAAmB,MAHnB;AAIR,2CAAW,QAAQ,UAAR,CAAmB,SAJtB;AAKR,uCAAO;AALC,6BAFM;AASlB,sCAAU,QAAQ;AATA,yBAAtB;;AAYA,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,cADqB;AAErC,oCAAQ,MAF6B;AAGrC,kCAAM;AAH+B,yBAAlC,EAIJ,IAJI,CAIC,kBAAU;AACd,mCAAO,OAAO,IAAd;AACH,yBANM,CAAP;AAOH;;;4DAIuB,O,EAAS;AAC7B,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,2CADqB;AAErC,kCAAM,OAF+B;AAGrC,oCAAQ,MAH6B;AAIrC,qCAAS,EAAC,gBAAgB,kBAAjB;AAJ4B,yBAAlC,EAKJ,IALI,CAKC,KAAK,cALN,CAAP;AAMH;;;4DAEuB,O,EAAS;AAC7B,4BAAI,WAAW,uCAAf;AACA,4BAAI,QAAQ,QAAR,KAAqB,iBAAzB,EAA4C;AACxC,wCAAY,QAAQ,QAApB;AACH;AACD,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,QADqB;AAErC,kCAAM,OAF+B;AAGrC,oCAAQ,MAH6B;AAIrC,qCAAS,EAAC,gBAAgB,kBAAjB;AAJ4B,yBAAlC,EAKJ,IALI,CAKC,KAAK,cALN,CAAP;AAMH;;;0DAEqB,O,EAAS;AAC3B,4BAAI,WAAW,EAAf;AACA,4BAAI,QAAQ,QAAR,KAAqB,iBAArB,IAA0C,QAAQ,QAAR,KAAqB,iBAAnE,EAAsF;AAClF,uCAAW,4CAA4C,QAAQ,QAA/D;AACA,gCAAI,QAAQ,SAAR,KAAsB,kBAA1B,EAA8C;AAC1C,4CAAY,iBAAiB,QAAQ,SAArC;AACH;AACJ;AACD,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,QADqB;AAErC,kCAAM,OAF+B;AAGrC,oCAAQ,MAH6B;AAIrC,qCAAS,EAAC,gBAAgB,kBAAjB;AAJ4B,yBAAlC,EAKJ,IALI,CAKC,KAAK,cALN,CAAP;AAMH;;;6DAEwB,O,EAAS;AAC9B,4BAAI,WAAW,EAAf;AACA,4BAAI,QAAQ,QAAR,KAAqB,iBAArB,IAA0C,QAAQ,QAAR,KAAqB,iBAAnE,EAAsF;AAClF,uCAAW,+CAA+C,QAAQ,QAAlE;AACA,gCAAI,QAAQ,MAAR,KAAmB,eAAvB,EAAwC;AACpC,4CAAY,cAAc,QAAQ,MAAlC;AACH;AACJ;AACD,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,QADqB;AAErC,kCAAM,OAF+B;AAGrC,oCAAQ,MAH6B;AAIrC,qCAAS,EAAC,gBAAgB,kBAAjB;AAJ4B,yBAAlC,EAKJ,IALI,CAKC,KAAK,cALN,CAAP;AAMH;;;4DAEuB,O,EAAS;AAC7B,4BAAI,WAAW,EAAf;AACA,4BAAI,QAAQ,QAAR,KAAqB,iBAArB,IAA0C,QAAQ,QAAR,KAAqB,iBAAnE,EAAsF;AAClF,uCAAW,gDAAgD,QAAQ,QAAnE;AACA,gCAAI,QAAQ,MAAR,KAAmB,eAAvB,EAAwC;AACpC,4CAAY,cAAc,QAAQ,MAAlC;AACH;AACD,gCAAI,QAAQ,SAAR,KAAsB,kBAA1B,EAA8C;AAC1C,4CAAY,iBAAiB,QAAQ,SAArC;AACH;AACJ;AACD,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,QADqB;AAErC,kCAAM,OAF+B;AAGrC,oCAAQ,MAH6B;AAIrC,qCAAS,EAAC,gBAAgB,kBAAjB;AAJ4B,yBAAlC,EAKJ,IALI,CAKC,KAAK,cALN,CAAP;AAMH;;;gEAE2B,O,EAAS;AACjC,4BAAI,WAAW,EAAf;AACA,4BAAI,QAAQ,QAAR,KAAqB,iBAArB,IAA0C,QAAQ,QAAR,KAAqB,iBAAnE,EAAsF;AAClF,uCAAW,gDAAgD,QAAQ,QAAnE;AACA,gCAAI,QAAQ,MAAR,KAAmB,eAAvB,EAAwC;AACpC,4CAAY,cAAc,QAAQ,MAAlC;AACH;AACD,gCAAI,QAAQ,SAAR,KAAsB,kBAA1B,EAA8C;AAC1C,4CAAY,iBAAiB,QAAQ,SAArC;AACH;AACJ;AACD,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,QADqB;AAErC,kCAAM,OAF+B;AAGrC,oCAAQ,MAH6B;AAIrC,qCAAS,EAAC,gBAAgB,kBAAjB;AAJ4B,yBAAlC,EAKJ,IALI,CAKC,KAAK,cALN,CAAP;AAMH;;;2DAEsB,O,EAAS;AAC5B,4BAAI,WAAW,EAAf;AACA,4BAAI,QAAQ,QAAR,KAAqB,iBAArB,IAA0C,QAAQ,QAAR,KAAqB,iBAA/D,IAAoF,QAAQ,QAAR,KAAqB,kBAA7G,EAAiI;AAC7H,uCAAW,oCAAoC,QAAQ,QAA5C,GAAuD,QAAvD,GAAkE,QAAQ,QAArF;AACA,gCAAI,QAAQ,MAAR,KAAmB,eAAvB,EAAwC;AACpC,4CAAY,cAAc,QAAQ,MAAlC;AACH;AACD,gCAAI,QAAQ,SAAR,KAAsB,kBAA1B,EAA8C;AAC1C,4CAAY,iBAAiB,QAAQ,SAArC;AACH;AACJ;AACD,+BAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACrC,iCAAK,KAAK,GAAL,GAAW,QADqB;AAErC,kCAAM,OAF+B;AAGrC,oCAAQ,MAH6B;AAIrC,qCAAS,EAAC,gBAAgB,kBAAjB;AAJ4B,yBAAlC,EAKJ,IALI,CAKC,KAAK,cALN,CAAP;AAMH;;;mDAEc,M,EAAQ;AACnB,+BAAO,EAAE,GAAF,CAAM,OAAO,IAAb,EAAmB,UAAC,CAAD,EAAI,CAAJ,EAAU;AAChC,mCAAO,EAAC,MAAM,CAAP,EAAU,OAAO,CAAjB,EAAP;AACH,yBAFM,CAAP;AAGH;;;yDAEoB,O,EAAS;AAAA;;AAE1B,4BAAI,UAAU,EAAE,GAAF,CAAM,QAAQ,OAAd,EAAuB,kBAAU;AAC3C,mCAAO;AACH,0CAAU,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,QAAhC,CADP;AAEH,0CAAU,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,QAAhC,CAFP;AAGH,wCAAQ,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,MAAhC,CAHL;AAIH,2CAAW,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,SAAhC,CAJR;AAKH,0CAAU,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,QAAhC,CALP;AAMH,0CAAU,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,QAAhC,CANP;AAOH,uCAAO,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,KAAhC,CAPJ;AAQH,0CAAU,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,QAAhC,CARP;AASH,8CAAc,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,YAAhC,CATX;AAUH,yCAAS,MAAK,WAAL,CAAiB,OAAjB,CAAyB,OAAO,OAAhC,CAVN;AAWH,uCAAO,OAAO,KAXX;AAYH,sCAAM,OAAO,IAZV;AAaH,yCAAS,OAAO;AAbb,6BAAP;AAeH,yBAhBa,CAAd;;AAkBA,gCAAQ,OAAR,GAAkB,OAAlB;;AAEA,+BAAO,OAAP;AACH","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n    }\n\n    // Called once per panel (graph)\n    query(options) {\n        var query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        var endpoint = '';\n\n        function isCategorySet(target) {\n            return typeof target.category !== \"undefined\" && target.category !== \"select category\" && typeof target.variable !== \"undefined\" && target.variable !== \"select variable\"\n        }\n\n        if (query.targets.filter(isCategorySet).length > 0) {\n            endpoint = '/v2/grafana/net/2/query';\n\n            var queryObject = {\n                targets: [],\n                from: \"-6h\",\n                until: \"now\"\n            };\n\n            query.targets.forEach(targetsLoop);\n\n            function targetsLoop(item, index) {\n                var temp = {};\n                if (typeof item.variable !== \"undefined\" && item.variable !== \"select variable\" && item.variable !== \"-- clear selection --\") {\n                    temp.variable = item.variable;\n                }\n                if (typeof item.device !== \"undefined\" && item.device !== \"select device\" && item.device !== \"-- clear selection --\") {\n                    temp.device = item.device;\n                }\n                if (typeof item.component !== \"undefined\" && item.component !== \"select component\" && item.component !== \"-- clear selection --\") {\n                    temp.component = item.component;\n                }\n                if (typeof item.sortByEl !== \"undefined\" && item.sortByEl !== \"select sorting\") {\n                    if(item.sortByEl == 'ascending'){\n                        temp.sortBy = 'curr.asc';\n                    }\n                    if(item.sortByEl == 'descending'){\n                        temp.sortBy = 'curr.desc';\n                    }\n                }\n                if (typeof item.selector !== \"undefined\" && item.selector !== \"select selector\") {\n                    temp.selector = item.selector;\n                }\n                if (typeof item.limit !== \"undefined\" && item.limit !== \"select limit\") {\n                    temp.limit = item.limit;\n                }\n                if (typeof item.tagFacet !== \"undefined\" && item.tagFacet !== \"select tag facet\" && item.tagFacet !== \"-- clear selection --\" && typeof item.tagOperation !== \"undefined\" && typeof item.tagWord !== \"undefined\" && item.tagWord !== \"select tag name\" && item.tagWord !== \"-- clear selection --\") {\n\n                    var result = [];\n                    item.tagData.forEach(tagsLoop);\n                    function tagsLoop(singleItem, index) {\n                        if (typeof singleItem.tagFacet !== \"undefined\" && singleItem.tagFacet !== \"\" && typeof singleItem.tagWord !== \"undefined\" && singleItem.tagWord !== \"\") {\n                            result.push({\n                                tagFacet: singleItem.tagFacet,\n                                tagOperation: singleItem.tagOperation,\n                                tagWord: singleItem.tagWord\n                            });\n                        }\n                    }\n\n                    temp.tags = result;\n                }\n                queryObject.targets.push(temp);\n            }\n\n            queryObject.from = query.rangeRaw.from;\n            queryObject.until = query.rangeRaw.to;\n            var data = JSON.stringify(queryObject);\n            console.log(data);\n            return this.backendSrv.datasourceRequest({\n                url: this.url + endpoint,\n                data: data,\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'}\n            });\n        }\n        else {\n            return '';\n        }\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration pange\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    // Optional\n    // Required for templating\n    metricFindCategoryQuery(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/v2/grafana/net/2/catalog/categories/list',\n            data: options,\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'}\n        }).then(this.mapToTextValue);\n    }\n\n    metricFindVariableQuery(options) {\n        var endpoint = '/v2/grafana/net/2/catalog/categories/';\n        if (options.category !== 'select category') {\n            endpoint += options.category;\n        }\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            data: options,\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'}\n        }).then(this.mapToTextValue);\n    }\n\n    metricFindDeviceQuery(options) {\n        var endpoint = '';\n        if (options.category !== 'select category' && options.variable !== 'select variable') {\n            endpoint = '/v2/grafana/net/2/catalog/devices?name=' + options.variable;\n            if (options.component !== 'select component') {\n                endpoint += '&components=' + options.component;\n            }\n        }\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            data: options,\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'}\n        }).then(this.mapToTextValue);\n    }\n\n    metricFindComponentQuery(options) {\n        var endpoint = '';\n        if (options.category !== 'select category' && options.variable !== 'select variable') {\n            endpoint = '/v2/grafana/net/2/catalog/components?name=' + options.variable;\n            if (options.device !== 'select device') {\n                endpoint += '&devices=' + options.device;\n            }\n        }\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            data: options,\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'}\n        }).then(this.mapToTextValue);\n    }\n\n    metricFindTagFacetQuery(options) {\n        var endpoint = '';\n        if (options.category !== 'select category' && options.variable !== 'select variable') {\n            endpoint = '/v2/grafana/net/2/catalog/tags/facets?name=' + options.variable;\n            if (options.device !== 'select device') {\n                endpoint += '&devices=' + options.device;\n            }\n            if (options.component !== 'select component') {\n                endpoint += '&components=' + options.component;\n            }\n        }\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            data: options,\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'}\n        }).then(this.mapToTextValue);\n    }\n\n    metricFindTagOperationQuery(options) {\n        var endpoint = '';\n        if (options.category !== 'select category' && options.variable !== 'select variable') {\n            endpoint = '/v2/grafana/net/2/catalog/tags/facets?name=' + options.variable;\n            if (options.device !== 'select device') {\n                endpoint += '&devices=' + options.device;\n            }\n            if (options.component !== 'select component') {\n                endpoint += '&components=' + options.component;\n            }\n        }\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            data: options,\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'}\n        }).then(this.mapToTextValue);\n    }\n\n    metricFindTagWordQuery(options) {\n        var endpoint = '';\n        if (options.category !== 'select category' && options.variable !== 'select variable' && options.tagFacet !== 'select tag facet') {\n            endpoint = '/v2/grafana/net/2/catalog/tags/' + options.tagFacet + '?name=' + options.variable;\n            if (options.device !== 'select device') {\n                endpoint += '&devices=' + options.device;\n            }\n            if (options.component !== 'select component') {\n                endpoint += '&components=' + options.component;\n            }\n        }\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            data: options,\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'}\n        }).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            return {text: d, value: i};\n        });\n    }\n\n    buildQueryParameters(options) {\n\n        var targets = _.map(options.targets, target => {\n            return {\n                category: this.templateSrv.replace(target.category),\n                variable: this.templateSrv.replace(target.variable),\n                device: this.templateSrv.replace(target.device),\n                component: this.templateSrv.replace(target.component),\n                sortByEl: this.templateSrv.replace(target.sortByEl),\n                selector: this.templateSrv.replace(target.selector),\n                limit: this.templateSrv.replace(target.limit),\n                tagFacet: this.templateSrv.replace(target.tagFacet),\n                tagOperation: this.templateSrv.replace(target.tagOperation),\n                tagWord: this.templateSrv.replace(target.tagWord),\n                refId: target.refId,\n                hide: target.hide,\n                tagData: target.tagData\n            };\n        });\n\n        options.targets = targets;\n\n        return options;\n    }\n}\n"]}