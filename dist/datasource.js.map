{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\n\nexport class NetSpyGlassDatasource {\n\n    static mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            return {text: d, value: i};\n        });\n    }\n\n    static mapToTextText(result) {\n        return _.map(result.data, (d, i) => {\n            return {text: d, value: d};\n        });\n    }\n\n    /**\n     * we get tag matches from the dialog in the form\n     *\n     * [{\"tagFacet\":\"Explicit\",\"tagWord\":\"core\",\"tagOperation\":\"==\"}, {\"tagFacet\":\"Vendor\",\"tagWord\":\"Cisco\",\"tagOperation\":\"<>\"}]\n     *\n     * transform this to\n     *\n     * \"Explicit.core, !Vendor.Cisco\"\n     *\n     */\n    static transformTagMatch(tagMatches) {\n        var tags = [];\n        var idx;\n        for (idx = 0; idx < tagMatches.length; idx++) {\n            var tm = tagMatches[idx];\n            var tt = ((tm.tagOperation === '<>') ? '!' : '') + tm.tagFacet + ((tm.tagWord !== '') ? ('.' + tm.tagWord) : '');\n            tags.push(tt);\n        }\n        return tags.join(',');\n    }\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.$q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.networkId = instanceSettings.jsonData.networkId || 1;\n        this.accessToken = (instanceSettings.jsonData.useToken !== false && instanceSettings.jsonData.accessToken !== undefined && instanceSettings.jsonData.accessToken !== '') ? '?access_token=' + instanceSettings.jsonData.accessToken : '';\n        this.endpointsBase = '/v2/grafana/net/' + this.networkId;\n        this.endpoints = {};\n        this.endpoints.category = this.endpointsBase + '/catalog/categories/list' + this.accessToken;\n        this.endpoints.variable = this.endpointsBase + '/catalog/categories/';\n        this.endpoints.query = this.endpointsBase + '/query' + this.accessToken;\n        this.endpoints.test = this.endpointsBase + '/test' + this.accessToken;\n\n        this.blankDropDownElement = '---';\n\n        this.targetName = {};\n        this.targetName.alias = '';\n        this.targetName.variable = 'select variable';\n        this.targetName.device = 'select device';\n        this.targetName.component = 'select component';\n        this.targetName.sortByEl = 'select sorting';\n        this.targetName.selector = 'choose selector';\n        this.targetName.limit = 'select limit';\n        this.targetName.group = 'select group';\n        this.targetName.tagFacet = this.blankDropDownElement;\n        this.targetName.tagWord = this.blankDropDownElement;\n        this.targetName.interval = 'select interval';\n        this.targetName.tagData = [];\n        this.targetName.format = '';\n        this.targetName.columns = '';\n        this.targetName.unique = '';\n        this.targetName.refId = '';\n\n        this.clearString = '-- clear selection --';\n    }\n\n    /**\n     * makes actual API call to NetSpyGlass server\n     *\n     * @param endpoint   API call endpoint\n     * @param method     GET or POST\n     * @param query      query object\n     * @returns {*}\n     * @private\n     */\n    _apiCall(endpoint, method, query) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            data: query,\n            method: method,\n            headers: {'Content-Type': 'application/json'}\n        });\n    }\n\n    /**\n     * this function is called when plugin builds a graph\n     *\n     * @param options\n     * @returns {*}\n     */\n    query(options) {\n        var self = this;\n        var data = this.buildQueryFromQueryDialogData(options);\n        var queryTargets = {};\n        for (var i = 0; i < data.targets.length; i++) {\n            var target = data.targets[i];\n            // UI passes only sort order (\"ascending\",\"descending\" or \"none\"). Prepend it with default column name\n            target.sortByEl = (target.sortByEl !== 'none') ? 'metric:' + target.sortByEl : target.sortByEl;\n            queryTargets[target.id] = target;\n        }\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        var response = this._apiCall(this.endpoints.query, 'POST', query);\n        // then: function(a,b,c)\n        return response.then( response => {\n            var data = response.data;\n            if (!data) return response;\n\n            // data is an Array of these:\n            //\n            // component:  \"eth0\"\n            // datapoints: Array[121]\n            // device:     \"synas1\"\n            // target:     \"ifInRate:synas1:eth0\"\n            // variable:   \"ifInRate\"\n\n            var seriesList = [];\n            for (i = 0; i < data.length; i++) {\n                var series = data[i];\n                if (!series || !series.datapoints) continue;\n                if (series.type === 'table') continue;\n\n                var target = queryTargets[series.id];\n                if (!target) continue;\n\n                var alias = target.alias;\n                if (alias) {\n                    series.target = self.getSeriesName(series, alias);\n                }\n\n                seriesList.push(series);\n            }\n\n            if (seriesList.length > 0) response.data = seriesList;\n\n            return response;\n        });\n    }\n\n    getSeriesName(series, alias) {\n        var regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n\n        return alias.replace(regex, function(match, g1, g2) {\n            var group = g1 || g2;\n            var segIndex = parseInt(group, 10);\n\n            if (group === 'm' || group === 'measurement') { return series.variable; }\n            if (group === 'device') return series.device;\n            if (group === 'component') return series.component;\n            if (group.indexOf('tag_') !== 0) { return match; }\n\n            var tag = group.replace('tag_', '');\n            if (!series.tags) { return match; }\n            return series.tags[tag];\n        });\n    };\n\n    // Required\n    // Used for testing datasource in datasource configuration page\n    testDatasource() {\n        var endpoint = this.endpoints.test;\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/annotations' + this.accessToken,\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    /**\n     * generic query. Grafana calls this function when it needs to get list of values for a dashboard\n     * template variable.\n     *\n     * User enters query in JSON Format, e.g.\n     *\n     * {\"variable\":\"cpuUtil\",\"columns\":\"device\"}\n     *\n     * User is responsible for setting value of the \"columns\" to what they want to receive back. This can be\n     * \"device\", \"component\" or tag facet\n     *\n     * This function forces request type=table even if user specified something else.\n     *\n     * Server returns data in the following format:\n     *\n     * [ {\n     *   \"columns\" : [ { \"text\" : \"device\" } ],\n     *   \"rows\" : [ [ \"synas1\" ], [ \"ex2200\" ] ],\n     *   \"type\" : \"table\"\n     * } ]\n     *\n     * \"rows\" is a list of lists because normally this query can return multiple columns.\n     * For the purpose of dashboard template we use only the first column if request specified multiple.\n     *\n     * @param query     query object as text string\n     * @returns {Promise.<TResult>}\n     */\n    metricFindQuery(query) {\n        var interpolated;\n        try {\n            interpolated = this.templateSrv.replace(query, query.scopedVars);\n        } catch (err) {\n            return this.$q.reject(err);\n        }\n        var data = this.buildQueryFromText(interpolated);\n        var target = data.targets[0];\n        target.format = 'list';\n        return this._apiCall(this.endpoints.query, 'POST', JSON.stringify(data)).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findCategoriesQuery() {\n        return this._apiCall(this.endpoints.category, 'POST', '').then(NetSpyGlassDatasource.mapToTextValue);\n    }\n\n    findVariablesQuery(options) {\n        var endpoint = this.endpoints.variable + options.category + this.accessToken;\n        return this._apiCall(endpoint, 'POST', '').then(NetSpyGlassDatasource.mapToTextValue);\n    }\n\n    findDevices(options) {\n        var data = this.buildQuery(options);\n        var target = data.targets[0];\n        target.device = '';  // erase to ignore current selection in the dialog\n        target.component = '';\n        target.columns = 'device';\n        target.unique = 'device';\n        target.sortByEl = 'device:ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findComponents(options) {\n        var data = this.buildQuery(options);\n        var target = data.targets[0];\n        target.component = '';  // erase to ignore current selection in the dialog\n        target.columns = 'component';\n        target.unique = 'component';\n        target.sortByEl = 'component:ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findTagFacets(options) {\n        var data = this.buildQuery(options);\n        var target = data.targets[0];\n        target.columns = 'tagFacet';\n        target.unique = 'tagFacet';\n        target.sortByEl = 'tagFacet:ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findTagWordsQuery(options, facet) {\n        var data = this.buildQuery(options);\n        var target = data.targets[0];\n        target.columns = facet;\n        target.unique = facet;\n        target.sortByEl = facet + ':ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    /**\n     * when building graphing query, this function is called with JS object that has at least\n     * attribute 'targets'\n     */\n    templateSrvParameters(queryObject) {\n        queryObject.targets = _.map(queryObject.targets, target => {\n            return {\n                category: this.templateSrv.replace(target.category),\n                variable: this.templateSrv.replace(target.variable),\n                device: this.templateSrv.replace(target.device),\n                component: this.templateSrv.replace(target.component),\n                tagFacet: this.templateSrv.replace(target.tagFacet),\n                tagOperation: this.templateSrv.replace(target.tagOperation),\n                tagWord: this.templateSrv.replace(target.tagWord),\n                sortByEl: this.templateSrv.replace(target.sortByEl),\n                selector: this.templateSrv.replace(target.selector),\n                format: this.templateSrv.replace(target.format),\n                limit: (target.limit === '') ? -1 : target.limit,\n                columns: this.templateSrv.replace(target.columns),\n                alias: this.templateSrv.replace(target.alias, queryObject.scopedVars),\n                refId: target.refId,\n                hide: target.hide,\n                tagData: target.tagData\n            };\n        });\n        return queryObject;\n    }\n\n    removeBlanks(item) {\n        var temp = {};\n        for (var key in item) {\n            if (!(key in this.targetName)) {\n                continue;\n            }\n            if (typeof item[key] == 'undefined' || item[key] == this.clearString || item[key] == this.targetName[key]) {\n                continue;\n            }\n            if (key == 'tagFacet' || key == 'tagWord') {\n                continue;\n            }\n            if (key == 'tagData') {\n                temp[key] = item[key].filter(t => !this.isBlankTagMatch(t));\n            } else {\n                temp[key] = item[key];\n            }\n        }\n        return temp;\n    }\n\n    isBlankTagMatch(tm) {\n        if (tm.tagFacet === \"\" || tm.tagFacet === this.blankDropDownElement) return true;\n        return !!(tm.tagWord === \"\" || tm.tagWord === this.blankDropDownElement);\n    }\n\n    /**\n     * build query object from an object that represents single query target. This\n     * is called to get items for drop-down lists in the graph or table panel query dialog.\n     */\n    buildQuery(options) {\n        var queryObject = {\n            targets: [ options ]\n        };\n        return this.buildQueryFromQueryDialogData(queryObject);\n    }\n\n    /**\n     * this function is called when we need to build query object from\n     * query entered as text string (e.g. in dashboard template dialog)\n     */\n    buildQueryFromText(options) {\n        var queryObject = {\n            targets: [ JSON.parse(options) ]\n        };\n        return this.buildQueryFromQueryDialogData(queryObject);\n    }\n\n    /**\n     * build query object from query dialog that can have multiple targets. This\n     * is used when plugin builds query for the graph or table panel\n     */\n    buildQueryFromQueryDialogData(query) {\n        this.templateSrvParameters(query);\n        query.targets = query.targets.filter(t => !t.hide);\n        var queryObject = {\n            targets: []\n        };\n        var index;\n        for (index = query.targets.length - 1; index >= 0; --index) {\n            var target = this.removeBlanks(query.targets[index]);\n            target.tags = NetSpyGlassDatasource.transformTagMatch(target.tagData);\n            delete target.tagData;\n            target.id = target.refId;\n            queryObject.targets.push(target);\n        }\n        if (typeof query.rangeRaw != 'undefined') {\n            queryObject.from = query.rangeRaw.from;\n            queryObject.until = query.rangeRaw.to;\n            queryObject.groupByTime = query.interval;\n        }\n        queryObject.scopedVars = '$variable';\n        return queryObject;\n    }\n\n}"]}